# -*- coding: utf-8 -*-
"""perceptron_learning_algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TsHNTwThAmesJ2JGce-kL-FKZKioHXx4
"""

from numpy import dot
import matplotlib.pyplot as plt
import numpy as np

row=int(input("Number of rows?"))
col=int(input("Number of Columns including baised column?"))
#chk_table= [ [ 0 for i in range(col) ] for j in range(row) ]
chk_table=[[-1,-1,1,-1],[-1,1,1,1],[1,-1,1,1],[1,1,1,1]]
#print(chk_table)
#for i in range(0,row):
 #   for j in range(0,col) :
  #      temp=input()
   #     chk_table[i][j]=temp
#print(chk_table)
#print("Enter weight:")
#wgt=list(map(float,input().split()))
wgt=[0.1,0.5,0.3]


#c=int(input("enter c:"))
c=1
e=1

while(e>0):
    e=0
    for i in range(0,row):
        net=0
        sign=-1
        dw=[]
        for j in range(0,col-1):
            net+=(chk_table[i][j]*wgt[j]*1.0)
        if(net>=0):
            sign=1
        print(sign)
        error=chk_table[i][col-1]-sign
        e+=error*error
        res=c*(chk_table[i][col-1]-sign)
        print(res)
        for j in range(0,col-1):
            dw.append(res*chk_table[i][j])
        for j in range(0,col-1):
            wgt[j]=dw[j]+wgt[j]
        print("dw:")
        print(dw)
        print("w:")
        print(wgt)

res=0
chk=list(map(int,input().split()))
for j in range(0,col-1):
    res+=wgt[j]*chk[j]
    
if(res>=0):
    print(1)
else:
    print(-1)

x = np.linspace(-5,5,100)

y = -(wgt[0]*x+wgt[2])/wgt[1]
plt.plot(x, y, '-r', label='y=2x+1')


#plt.fill_under(x,y, color='red', alpha=.5)
plt.fill_between(x, y, np.min(y),color='red', alpha=.5)
plt.fill_between(x, y, np.max(y), color='green', alpha=.5)
plt.show()


# -*- coding: utf-8 -*-
"""Decession_Tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G1a_lJ_lSEfV6hliWWrJVIMagAujQSiv
"""

import numpy as np 
import pandas as pd 
import io
from google.colab import files

uploaded = files.upload()

data = pd.read_csv(io.BytesIO(uploaded['dataset.csv']))
print(data)

def log2(x):
  if x==0.0:return 0
  else: return np.log2(x)

#Driver Code
log2(1)

def entropy(target):
    elements,counts = np.unique(target,return_counts = True)
    #print('Elements=',elements,'Its Respective Counts=',counts)
    entropy=0
    for i in range(len(elements)):
        entropy += (-counts[i]/np.sum(counts)) * log2(counts[i]/np.sum(counts))
    return entropy

#driver code
total_entropy = entropy(data['PlayTennis'])
print('Entropy =',total_entropy,'\n')

def information_gain(data,split_attribute,target):  
    total_entropy = entropy(data[target])   
    vals,counts= np.unique(data[split_attribute],return_counts=True)  
    
    weighted_entropy=0
    for i in range(len(vals)):
        s_entropy = entropy(data.where(data[split_attribute]==vals[i]]).dropna()[target])
        weighted_entropy += (counts[i]/np.sum(counts))*s_entropy
      
    #information gain  
    Information_Gain = total_entropy - weighted_entropy  
    return Information_Gain  

#driver code

gain=information_gain(data,'Humidity','PlayTennis')
print('Information Gain=',gain)
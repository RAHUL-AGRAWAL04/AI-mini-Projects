# -*- coding: utf-8 -*-
"""knn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xhlcUQVIAv97D3QpiM_VppEuil_q25nx

KNN Implementation
"""

from math import sqrt
import matplotlib.pyplot as plt

"""Calculating Euclidean distance between two points"""

def euclidean_distance(point1, point2):
	distance = 0.0
	distance = ((point1[0] - point2[0])**2) + ((point1[1] - point2[1])**2)
	return sqrt(distance)

#Driver Code
point1 = [0,0]
point2 = [4,6]
euclidean_distance(point1, point2)

"""Locating the most nearest neighbours"""

def get_neighbors(training_data, testing_data, number_of_neighbors):

  distances = []
  for training_row in training_data:
    dist = euclidean_distance(testing_data, training_row)
    distances.append((training_row, dist))
  distances.sort(key=lambda element: element[1])
  #print(distances)
  neighbors = []
  for i in range(number_of_neighbors):
    neighbors.append(distances[i][0])
  return neighbors

#Driver Code
dataset = [[2.7810836,2.550537003,0],
	[1.465489372,2.362125076,0],
	[3.396561688,4.400293529,0],
	[1.38807019,1.850220317,0],
	[3.06407232,3.005305973,0],
	[7.627531214,2.759262235,1],
	[5.332441248,2.088626775,1],
	[6.922596716,1.77106367,1],
	[8.675418651,-0.242068655,1],
	[7.673756466,3.508563011,1]]

#Driver Code
testing_data = [7,7]
get_neighbors(dataset, testing_data, 5)

"""Make a classification prediction with neighbors"""

def predict_classification(train, test_row, num_neighbors):
  neighbors = get_neighbors(train, test_row, num_neighbors)
  neighbour_classes = []
  for neighbour in neighbors:
    neighbour_classes.append(neighbour[-1])

  prediction = max(set(neighbour_classes), key=neighbour_classes.count)
  return prediction
 
# Test distance function
dataset = [[2.7810836,2.550537003,0],
	[1.465489372,2.362125076,0],
	[3.396561688,4.400293529,0],
	[1.38807019,1.850220317,0],
	[3.06407232,3.005305973,0],
	[7.627531214,2.759262235,1],
	[5.332441248,2.088626775,1],
	[6.922596716,1.77106367,1],
	[8.675418651,-0.242068655,1],
	[7.673756466,3.508563011,1]]

testing_data = [4,6]

prediction = predict_classification(dataset, testing_data, 3)
print('class = %d.\n\n' % (prediction))

#Graph plotting
x_dataset = [data[0] for data in dataset]  
y_dataset = [data[1] for data in dataset]  
plt.scatter(x_dataset, y_dataset)  
plt.xlabel('x - axis')  
plt.ylabel('y - axis')  
plt.title('knn graph')  
plt.show()

